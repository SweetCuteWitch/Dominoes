(()=>{"use strict";var e={935:(e,l)=>{Object.defineProperty(l,"__esModule",{value:!0}),l.playerMove=l.addToTable=l.findAvailable=l.pickDies=l.getRandomDie=l.fillPlayers=l.fillPile=l.getHighestDie=l.getRandom=void 0,l.getRandom=(e,l)=>Math.trunc(Math.random()*(e-l)+l),l.getHighestDie=e=>{let l=0;return e.forEach((e=>{e[0]+e[1]>l&&(l=e[0]+e[1])})),l},l.fillPile=()=>{const e=[];for(let l=0;l<=6;l++)for(let i=0;i<=6;i++){const s=l<i?[l,i]:[i,l];e.push(JSON.stringify(s))}return[...new Set(e)].map((e=>JSON.parse(e)))},l.fillPlayers=e=>{const l=[];for(let i=0;i<e;i++)l.push({id:i,dies:[]});return l},l.getRandomDie=e=>{const i=l.getRandom(e.length,0),s=e[i];return e.splice(i,1),s};const i=(e,i)=>{e.dies.push(l.getRandomDie(i))};l.pickDies=(e,l)=>{for(let s=0;s<7;s++)for(let s=0;s<e.length;s++)i(e[s],l)},l.findAvailable=(e,l)=>l.find((l=>{if(l[0]===e[0]||l[0]===e[1]||l[1]===e[0]||l[1]===e[1])return l})),l.addToTable=(e,l)=>{if(l[0]===e.available()[1])e.allDetails.push(l);else if(l[1]===e.available()[0])e.allDetails.unshift(l);else{const i=l.reverse();i[0]===e.available()[1]?e.allDetails.push(i):i[1]===e.available()[0]&&e.allDetails.unshift(i)}},l.playerMove=(e,i,s)=>{let a=l.findAvailable(i.available(),e.dies);if(!a)for(;!l.findAvailable(i.available(),e.dies);){if(0===s.length)return console.log(`Pile now is empty, player ${e.id}'s skipping`),console.log("\n\r\n\r"),!0;e.dies.unshift(l.getRandomDie(s)),console.log(`Player ${e.id} picked ${JSON.stringify(e.dies[0])}`),console.log(`Player ${e.id} now has ${JSON.stringify(e.dies)}`),console.log("\n\r")}if(a=l.findAvailable(i.available(),e.dies),a){const o=e.dies.indexOf(a);e.dies.splice(o,1),l.addToTable(i,a),console.log(`Player ${e.id} played ${JSON.stringify(a)}`),console.log(`Player ${e.id} now has ${JSON.stringify(e.dies)}`),console.log(`Pile now is ${JSON.stringify(s)}`),console.log(`Table now is ${JSON.stringify(i.allDetails)}`),console.log("\n\r\n\r")}return!1}}},l={};function i(s){var a=l[s];if(void 0!==a)return a.exports;var o=l[s]={exports:{}};return e[s](o,o.exports,i),o.exports}(()=>{const e=i(935),l=e.fillPile(),s=e.fillPlayers(2);e.pickDies(s,l);const a={allDetails:[e.getRandomDie(l)],available(){return[this.allDetails[0][0],this.allDetails[this.allDetails.length-1][1]]}};s.forEach(((e,l)=>{console.log(`Player ${l} has ${JSON.stringify(e.dies)}`)})),s.sort(((l,i)=>e.getHighestDie(l.dies)<e.getHighestDie(i.dies)?1:-1)),console.log(`Default pile is ${JSON.stringify(l)}`),console.log(`Default table is ${JSON.stringify(a.allDetails)}`),console.log(`Player ${s[0].id} moves first`),console.log("\n\r\n\r\n\r");let o=!1;for(;!o;){let i=0;for(let t=0;t<s.length&&(e.playerMove(s[t],a,l)?(i++,i===s.length&&(alert("Draw!!"),console.log("Draw!!"),o=!0)):0===s[t].dies.length&&(alert(`Player ${s[t].id} wins!!`),console.log(`Player ${s[t].id} wins!!`),o=!0),!o);t++);}})()})();